name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Write-Host "=== Configuring Remote Desktop Settings ==="

          # Ensure registry keys exist
          if (-not (Test-Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server')) {
              New-Item -Path 'HKLM:\System\CurrentControlSet\Control' -Name 'Terminal Server' | Out-Null
          }
          if (-not (Test-Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp')) {
              New-Item -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations' -Name 'RDP-Tcp' | Out-Null
          }

          # Enable RDP and disable NLA completely
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Allow Remote Desktop in Windows Firewall
          Write-Host "Configuring Firewall for RDP..."
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

          # Restart Remote Desktop service cleanly
          Write-Host "Restarting Remote Desktop Service..."
          Stop-Service -Name TermService -Force
          Start-Service -Name TermService
          Write-Host "RDP Service restarted successfully."

          # Verify RDP port status
          Write-Host "Verifying RDP service and port 3389..."
          $serviceStatus = (Get-Service -Name TermService).Status
          Write-Host "TermService status: $serviceStatus"
          netstat -ano | findstr 3389

          if ($serviceStatus -ne "Running") {
              Write-Error "RDP service is not running!"
              exit 1
          }

          Write-Host "RDP configured and verified."

      - name: Create RDP User with Secure Password
        run: |
          Write-Host "=== Creating Secure RDP User ==="

          Add-Type -AssemblyName System.Security

          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126))
          }

          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name "RDP"
          }

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

          Write-Host "RDP user created successfully."

      - name: Install Tailscale
        run: |
          Write-Host "=== Installing Tailscale ==="
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

          Write-Host "Tailscale installation completed."

      - name: Establish Tailscale Connection
        run: |
          Write-Host "=== Connecting to Tailscale ==="
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for Tailscale IP assignment
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP assigned: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "=== Verifying RDP Port ==="
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to port 3389 failed!"
              exit 1
          }
          Write-Host "âœ… RDP port 3389 is open and reachable."

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP:3389"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"

          # Keep session alive for MSTSC
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Keep workflow running."
              Start-Sleep -Seconds 300
          }
